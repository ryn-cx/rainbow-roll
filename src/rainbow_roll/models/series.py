# generated by datamodel-codegen:
#   filename:  <dict>

from __future__ import annotations

from typing import Any

from pydantic import BaseModel, ConfigDict


class PosterWideItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    width: int
    height: int
    type: str
    source: str


class PosterTallItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    width: int
    height: int
    type: str
    source: str


class Images(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    poster_wide: list[list[PosterWideItem]]
    poster_tall: list[list[PosterTallItem]]


class ExtendedMaturityRating(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    system: str
    rating: str
    level: str


class Award(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    text: str
    icon_url: str
    is_current_award: bool
    is_winner: bool


class Datum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str
    channel_id: str
    title: str
    slug: str
    slug_title: str
    description: str
    extended_description: str
    keywords: list[str]
    season_tags: list[str]
    images: Images
    episode_count: int
    season_count: int
    media_count: int
    content_provider: str
    maturity_ratings: list[str]
    extended_maturity_rating: ExtendedMaturityRating
    is_mature: bool
    mature_blocked: bool
    is_subbed: bool
    is_dubbed: bool
    is_simulcast: bool
    seo_title: str
    seo_description: str
    subtitle_locales: list[str]
    audio_locales: list[str]
    availability_status: str
    availability_notes: str
    series_launch_year: int
    awards: list[Award]
    content_descriptors: list[str]


class ModelItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total: int
    data: list[Datum]
    meta: dict[str, Any]
