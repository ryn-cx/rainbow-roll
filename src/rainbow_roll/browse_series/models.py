# generated by datamodel-codegen:
#   filename:  <dict>

from __future__ import annotations

from typing import Any

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class PosterTallItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    height: int
    source: str
    type: str
    width: int


class PosterWideItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    height: int
    source: str
    type: str
    width: int


class PromoImageItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    height: int
    source: str
    type: str
    width: int


class Images(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    poster_tall: list[list[PosterTallItem]]
    poster_wide: list[list[PosterWideItem]]
    promo_image: list[list[PromoImageItem]] | None = None


class ExtendedMaturityRating(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    level: str | None = None
    rating: str | None = None
    system: str | None = None


class Award(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    icon_url: str
    is_current_award: bool
    is_winner: bool
    text: str


class Images1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    poster_tall: list[list[PosterTallItem]]
    poster_wide: list[list[PosterWideItem]]


class Livestream(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    countdown_visibility: int
    end_date: AwareDatetime
    episode_end_date: AwareDatetime
    episode_id: str
    episode_start_date: AwareDatetime
    images: Images1
    start_date: AwareDatetime


class SeriesMetadata(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    audio_locales: list[str]
    availability_notes: str
    content_descriptors: list[str] | None = None
    episode_count: int
    extended_description: str
    extended_maturity_rating: ExtendedMaturityRating
    is_dubbed: bool
    is_mature: bool
    is_simulcast: bool
    is_subbed: bool
    mature_blocked: bool
    maturity_ratings: list[str]
    season_count: int
    series_launch_year: int
    subtitle_locales: list[str]
    tenant_categories: list[str] | None = None
    awards: list[Award] | None = None
    livestream: Livestream | None = None


class Field1s(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    displayed: str
    percentage: int
    unit: str


class Field2s(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    displayed: str
    percentage: int
    unit: str


class Field3s(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    displayed: str
    percentage: int
    unit: str


class Field4s(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    displayed: str
    percentage: int
    unit: str


class Field5s(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    displayed: str
    percentage: int
    unit: str


class Rating(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total: int
    field_1s: Field1s = Field(..., alias="1s")
    field_2s: Field2s = Field(..., alias="2s")
    field_3s: Field3s = Field(..., alias="3s")
    field_4s: Field4s = Field(..., alias="4s")
    field_5s: Field5s = Field(..., alias="5s")
    average: str


class Datum(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str
    promo_description: str
    linked_resource_key: str
    images: Images
    series_metadata: SeriesMetadata
    description: str
    external_id: str
    slug_title: str
    rating: Rating
    channel_id: str
    slug: str
    title: str
    last_public: AwareDatetime
    type: str
    promo_title: str
    new: bool


class BrowseSeries(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    total: int
    data: list[Datum]
    meta: dict[str, Any]
